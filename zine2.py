import pandas as pd
import torch
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Load the data from the CSV generated by zine1.py
def load_data(filename='papers.csv'):
    try:
        data = pd.read_csv(filename)
        print(f"Loaded {len(data)} papers from {filename}")
        return data
    except FileNotFoundError:
        print(f"Error: {filename} not found. Run zine1.py first to generate the data.")
        return None

# Combine titles and abstracts into a text corpus
def create_corpus(data):
    if data is not None:
        return " ".join(data['title'].astype(str) + " " + data['abstract_url'].astype(str))
    else:
        return ""

# Initialize GPT-2 model and tokenizer
def load_model():
    print("Loading GPT-2 model...")
    tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
    model = GPT2LMHeadModel.from_pretrained('gpt2').to(
        torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    )
    return model, tokenizer

# Generate text completion using GPT-2
def generate_completion(prompt, model, tokenizer, max_length=50):
    inputs = tokenizer(prompt, return_tensors='pt').to(model.device)
    output = model.generate(
        inputs['input_ids'], 
        max_length=max_length, 
        num_return_sequences=1, 
        no_repeat_ngram_size=2, 
        early_stopping=True
    )
    return tokenizer.decode(output[0], skip_special_tokens=True)

# Main function to load data, initialize model, and generate completion
def main():
    data = load_data()  # Load data from CSV
    if data is None:
        return  # Stop execution if no data is found

    corpus = create_corpus(data)  # Create corpus from data

    model, tokenizer = load_model()  # Load GPT-2 model and tokenizer

    # Example: Use the first paper's title as a prompt
    prompt = data['title'].iloc[0] if not data.empty else "AI is transforming"
    print("Prompt:", prompt)

    # Generate and display the completion
    completion = generate_completion(prompt, model, tokenizer)
    print("Generated Completion:", completion)

if __name__ == "__main__":
    main()
